{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"Books","date":"2023-12-31T16:00:00.000Z","updated":"2025-09-24T08:51:28.644Z","comments":true,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":"推荐书籍这里是我读过或正在读的一些好书，涵盖技术和非技术领域，希望对您有所帮助。 技术书籍 《JavaScript高级程序设计》 作者：Nicholas C. Zakas 评分：★★★★★ 推荐理由：JavaScript领域的经典教材，内容全面深入 《深入理解计算机系统》 作者：Randal E. Bryant 评分：★★★★★ 推荐理由：从底层理解计算机系统的运作原理 《算法导论》 作者：Thomas H. Cormen 评分：★★★★☆ 推荐理由：算法学习的经典教材 非技术书籍 《原则》 作者：Ray Dalio 评分：★★★★★ 推荐理由：生活和工作的原则指导 《思考，快与慢》 作者：Daniel Kahneman 评分：★★★★☆ 推荐理由：了解人类思考决策的模式"},{"title":"Links","date":"2023-12-31T16:00:00.000Z","updated":"2025-09-24T08:51:46.928Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":"友情链接这里是一些我常访问的优质网站和博客，推荐给大家！ 技术博客 掘金 - 高质量的技术社区 知乎 - 问答社区，包含许多技术话题 CSDN - 中文IT技术社区 SegmentFault - 思否，开发者社区 学习资源 GitHub - 代码托管平台 MDN Web Docs - Web技术文档 Stack Overflow - 程序员问答社区 掘金翻译计划 - 优质技术文章翻译 个人博客 前端之巅 - 知乎前端专栏 React官方博客 - React最新动态 Vue.js官方博客 - Vue.js最新动态"},{"title":"Categories","date":"2023-12-31T16:00:00.000Z","updated":"2025-09-24T08:50:43.314Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":"文章分类欢迎来到我的博客分类页面！这里汇总了我所有文章的分类，方便您快速查找感兴趣的内容。 技术 编程开发 前端技术 后端技术 数据库 生活 日常感悟 学习笔记 工具分享 其他 未分类"},{"title":"Repository","date":"2023-12-31T16:00:00.000Z","updated":"2025-09-24T08:51:09.224Z","comments":true,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":"我的项目这里是我在GitHub上的一些开源项目，欢迎大家Star和Fork！ 博客项目my_Blog 描述：个人博客源码 技术栈：Hexo、Markdown 链接：https://github.com/lwy-git/my_Blog 开发计划 正在准备新的前端项目 学习React Native开发 探索AI相关技术应用"},{"title":"About","date":"2023-12-31T16:00:00.000Z","updated":"2025-09-24T08:52:06.591Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"关于我个人介绍你好！我是lwy，一名热爱技术的开发者。 专注于Web前端开发 喜欢学习新技术和解决问题 乐于分享技术经验和学习心得 博客初衷创建这个博客的主要目的是： 记录自己的学习历程和技术成长 分享遇到的问题和解决方案 与其他开发者交流和学习 联系我如果你有任何问题或建议，欢迎联系我： GitHub: https://github.com/lwy-git Email: lwy@example.com（示例邮箱） 感谢你的访问和支持！"},{"title":"Tags","date":"2025-09-24T09:02:31.000Z","updated":"2025-09-24T09:03:11.234Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"React基础教程","slug":"React基础教程","date":"2025-09-24T09:05:13.000Z","updated":"2025-09-24T09:07:44.668Z","comments":true,"path":"2025/09/24/React基础教程/","permalink":"http://example.com/2025/09/24/React%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/","excerpt":"","text":"React基础教程什么是React？React是一个由Facebook开发的开源JavaScript库，用于构建用户界面，特别适用于构建单页应用（SPA）。React采用组件化的开发方式，使得开发者可以将UI拆分为独立、可复用的组件，从而提高代码的可维护性和复用性。 React的核心特点包括： 声明式：你只需描述UI应该是什么样子，React会自动处理更新和渲染 组件化：将UI拆分为独立、可复用的组件 一次学习，随处编写：可以使用React开发Web应用、移动端应用（React Native）和VR应用 React的核心概念1. 组件（Components）组件是React应用的基本构建块。一个组件就是一个独立的UI单元，它可以接收输入（称为props）并返回React元素，描述在屏幕上应该显示什么。 组件可以分为两类： 函数组件：使用JavaScript函数定义的组件 类组件：使用ES6类定义的组件 函数组件示例123function Welcome(props) &#123; return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;&#125; 类组件示例12345class Welcome extends React.Component &#123; render() &#123; return &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;; &#125;&#125; 2. PropsProps是组件的输入，它们是只读的。当一个组件接收props时，它不应该修改这些props，而是根据这些props来渲染UI。 1234567891011function Greeting(props) &#123; return ( &lt;div&gt; &lt;h1&gt;Hello, &#123;props.name&#125;!&lt;/h1&gt; &lt;p&gt;You are &#123;props.age&#125; years old.&lt;/p&gt; &lt;/div&gt; );&#125;// 使用组件并传递props&lt;Greeting name=&quot;张三&quot; age=&#123;25&#125; /&gt; 3. StateState是组件内部管理的数据，它决定了组件的行为和外观。与props不同，state是可变的，当state发生变化时，组件会重新渲染。 在类组件中使用state： 12345678910111213141516171819class Counter extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; count: 0 &#125;; &#125; increment() &#123; this.setState(&#123; count: this.state.count + 1 &#125;); &#125; render() &#123; return ( &lt;div&gt; &lt;p&gt;Count: &#123;this.state.count&#125;&lt;/p&gt; &lt;button onClick=&#123;() =&gt; this.increment()&#125;&gt;Increment&lt;/button&gt; &lt;/div&gt; ); &#125;&#125; 创建第一个React应用使用Create React AppCreate React App是一个官方支持的创建React单页应用程序的工具。它提供了一个零配置的现代构建设置。 123456789# 使用npmnpx create-react-app my-appcd my-appnpm start# 使用yarnyarn create react-app my-appcd my-appyarn start 创建完成后，你会得到一个基本的React应用结构，包括： public/index.html：HTML入口文件 src/index.js：JavaScript入口文件 src/App.js：主应用组件 一个简单的React应用示例以下是一个简单的React应用示例，它显示一个计数器： 123456789101112131415161718192021222324252627import React, &#123; useState &#125; from &#x27;react&#x27;;import &#x27;./App.css&#x27;;function App() &#123; // 使用useState Hook来管理状态 const [count, setCount] = useState(0); return ( &lt;div className=&quot;App&quot;&gt; &lt;header className=&quot;App-header&quot;&gt; &lt;h1&gt;React计数器&lt;/h1&gt; &lt;p&gt;当前计数: &#123;count&#125;&lt;/p&gt; &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt; 增加 &lt;/button&gt; &lt;button onClick=&#123;() =&gt; setCount(count - 1)&#125;&gt; 减少 &lt;/button&gt; &lt;button onClick=&#123;() =&gt; setCount(0)&#125;&gt; 重置 &lt;/button&gt; &lt;/header&gt; &lt;/div&gt; );&#125;export default App; React生命周期在类组件中，React提供了一系列生命周期方法，允许你在组件的不同阶段执行代码： 挂载阶段：组件被创建并插入DOM时 constructor() static getDerivedStateFromProps() render() componentDidMount() 更新阶段：组件的props或state发生变化时 static getDerivedStateFromProps() shouldComponentUpdate() render() getSnapshotBeforeUpdate() componentDidUpdate() 卸载阶段：组件从DOM中移除时 componentWillUnmount() 错误处理：渲染过程、生命周期方法、子组件的构造函数中发生错误时 static getDerivedStateFromError() componentDidCatch() React HooksReact Hooks是React 16.8引入的新特性，它允许你在不编写类的情况下使用state以及其他的React特性。 常用的HooksuseStateuseState Hook允许你在函数组件中添加state。 123456789101112131415import React, &#123; useState &#125; from &#x27;react&#x27;;function Example() &#123; // 声明一个叫&quot;count&quot;的state变量，初始值为0 const [count, setCount] = useState(0); return ( &lt;div&gt; &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt; &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt; Click me &lt;/button&gt; &lt;/div&gt; );&#125; useEffectuseEffect Hook允许你在函数组件中执行副作用操作（如数据获取、订阅或手动修改DOM）。 1234567891011121314151617181920import React, &#123; useState, useEffect &#125; from &#x27;react&#x27;;function Example() &#123; const [count, setCount] = useState(0); // 相当于componentDidMount和componentDidUpdate useEffect(() =&gt; &#123; // 更新文档标题 document.title = `You clicked $&#123;count&#125; times`; &#125;); return ( &lt;div&gt; &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt; &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt; Click me &lt;/button&gt; &lt;/div&gt; );&#125; JSX语法JSX是一种JavaScript的语法扩展，它允许你在JavaScript代码中编写类似HTML的标记。React使用JSX来描述UI应该是什么样子。 JSX的基本规则 JSX看起来像HTML，但它实际上是JavaScript 在JSX中，你可以使用大括号{}来嵌入JavaScript表达式 JSX标签可以有属性，属性名使用驼峰命名法（如className而不是class） 所有的标签都必须正确关闭 根元素必须只有一个 1234567891011const element = ( &lt;div&gt; &lt;h1&gt;Hello, world!&lt;/h1&gt; &lt;p&gt;Welcome to React.&lt;/p&gt; &lt;img src=&quot;logo.png&quot; alt=&quot;React logo&quot; className=&quot;logo&quot; /&gt; &lt;button onClick=&#123;() =&gt; alert(&#x27;Button clicked!&#x27;)&#125;&gt; Click me &lt;/button&gt; &lt;p&gt;&#123;1 + 1&#125; = 2&lt;/p&gt; &lt;/div&gt;); 事件处理在React中，事件处理与DOM事件处理类似，但有一些语法上的区别： React事件使用驼峰命名法（如onClick而不是onclick） 在JSX中，你需要传递一个函数作为事件处理程序，而不是一个字符串 在类组件中，你需要注意this的绑定 1234567891011121314151617181920212223242526272829303132333435363738// 函数组件中的事件处理function ActionLink() &#123; function handleClick(e) &#123; e.preventDefault(); console.log(&#x27;The link was clicked.&#x27;); &#125; return ( &lt;a href=&quot;#&quot; onClick=&#123;handleClick&#125;&gt; Click me &lt;/a&gt; );&#125;// 类组件中的事件处理class Toggle extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; isToggleOn: true &#125;; // 为了在回调中使用`this`，这个绑定是必不可少的 this.handleClick = this.handleClick.bind(this); &#125; handleClick() &#123; this.setState(prevState =&gt; (&#123; isToggleOn: !prevState.isToggleOn &#125;)); &#125; render() &#123; return ( &lt;button onClick=&#123;this.handleClick&#125;&gt; &#123;this.state.isToggleOn ? &#x27;ON&#x27; : &#x27;OFF&#x27;&#125; &lt;/button&gt; ); &#125;&#125; 条件渲染在React中，你可以使用JavaScript的条件运算符和逻辑运算符来实现条件渲染。 if语句1234567function Greeting(props) &#123; const isLoggedIn = props.isLoggedIn; if (isLoggedIn) &#123; return &lt;UserGreeting /&gt;; &#125; return &lt;GuestGreeting /&gt;;&#125; 条件运算符123456789101112function Greeting(props) &#123; const isLoggedIn = props.isLoggedIn; return ( &lt;div&gt; &#123;isLoggedIn ? ( &lt;UserGreeting /&gt; ) : ( &lt;GuestGreeting /&gt; )&#125; &lt;/div&gt; );&#125; 逻辑与运算符1234567891011function Mailbox(props) &#123; const unreadMessages = props.unreadMessages; return ( &lt;div&gt; &lt;h1&gt;Hello!&lt;/h1&gt; &#123;unreadMessages.length &gt; 0 &amp;&amp; ( &lt;h2&gt;You have &#123;unreadMessages.length&#125; unread messages.&lt;/h2&gt; )&#125; &lt;/div&gt; );&#125; 列表渲染在React中，你可以使用map()方法来渲染列表。 1234567891011121314151617function NumberList(props) &#123; const numbers = props.numbers; const listItems = numbers.map((number) =&gt; &lt;li key=&#123;number.toString()&#125;&gt; &#123;number&#125; &lt;/li&gt; ); return ( &lt;ul&gt;&#123;listItems&#125;&lt;/ul&gt; );&#125;const numbers = [1, 2, 3, 4, 5];ReactDOM.render( &lt;NumberList numbers=&#123;numbers&#125; /&gt;, document.getElementById(&#x27;root&#x27;)); 注意：当渲染列表时，每个列表项都应该有一个唯一的key属性，这有助于React识别哪些项发生了变化、被添加或被移除。 表单处理在React中，表单处理有两种方式：受控组件和非受控组件。 受控组件受控组件是指表单元素的值由React的state控制的组件。 12345678910111213141516171819202122232425262728293031class NameForm extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; value: &#x27;&#x27; &#125;; &#125; handleChange(event) &#123; this.setState(&#123; value: event.target.value &#125;); &#125; handleSubmit(event) &#123; alert(&#x27;提交的名字: &#x27; + this.state.value); event.preventDefault(); &#125; render() &#123; return ( &lt;form onSubmit=&#123;(e) =&gt; this.handleSubmit(e)&#125;&gt; &lt;label&gt; 名字: &lt;input type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;(e) =&gt; this.handleChange(e)&#125; /&gt; &lt;/label&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt; &lt;/form&gt; ); &#125;&#125; 非受控组件非受控组件是指表单元素的值由DOM本身控制的组件，你可以使用ref来访问DOM元素的值。 1234567891011121314151617181920212223class NameForm extends React.Component &#123; constructor(props) &#123; super(props); this.inputRef = React.createRef(); &#125; handleSubmit(event) &#123; alert(&#x27;提交的名字: &#x27; + this.inputRef.current.value); event.preventDefault(); &#125; render() &#123; return ( &lt;form onSubmit=&#123;(e) =&gt; this.handleSubmit(e)&#125;&gt; &lt;label&gt; 名字: &lt;input type=&quot;text&quot; ref=&#123;this.inputRef&#125; /&gt; &lt;/label&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt; &lt;/form&gt; ); &#125;&#125; 组件通信在React中，组件之间的通信主要有以下几种方式： 父组件向子组件传递数据父组件可以通过props向子组件传递数据。 123456789101112131415161718// 父组件function ParentComponent() &#123; return ( &lt;div&gt; &lt;ChildComponent name=&quot;张三&quot; age=&#123;25&#125; /&gt; &lt;/div&gt; );&#125;// 子组件function ChildComponent(props) &#123; return ( &lt;div&gt; &lt;p&gt;姓名: &#123;props.name&#125;&lt;/p&gt; &lt;p&gt;年龄: &#123;props.age&#125;&lt;/p&gt; &lt;/div&gt; );&#125; 子组件向父组件传递数据子组件可以通过调用父组件传递的回调函数来向父组件传递数据。 12345678910111213141516171819202122232425262728293031// 父组件function ParentComponent() &#123; const [childData, setChildData] = useState(&#x27;&#x27;); const handleChildData = (data) =&gt; &#123; setChildData(data); &#125;; return ( &lt;div&gt; &lt;p&gt;子组件传递的数据: &#123;childData&#125;&lt;/p&gt; &lt;ChildComponent onDataChange=&#123;handleChildData&#125; /&gt; &lt;/div&gt; );&#125;// 子组件function ChildComponent(props) &#123; const [inputValue, setInputValue] = useState(&#x27;&#x27;); const handleChange = (e) =&gt; &#123; setInputValue(e.target.value); props.onDataChange(e.target.value); &#125;; return ( &lt;div&gt; &lt;input type=&quot;text&quot; value=&#123;inputValue&#125; onChange=&#123;handleChange&#125; /&gt; &lt;/div&gt; );&#125; React RouterReact Router是React的官方路由库，它允许你在React应用中实现客户端路由。 安装React Router12345# 使用npmnpm install react-router-dom# 使用yarnyarn add react-router-dom 基本使用123456789101112131415161718192021222324252627282930313233343536373839404142import React from &#x27;react&#x27;;import &#123; BrowserRouter as Router, Route, Link &#125; from &#x27;react-router-dom&#x27;;function Home() &#123; return &lt;h2&gt;Home&lt;/h2&gt;;&#125;function About() &#123; return &lt;h2&gt;About&lt;/h2&gt;;&#125;function Users() &#123; return &lt;h2&gt;Users&lt;/h2&gt;;&#125;function AppRouter() &#123; return ( &lt;Router&gt; &lt;div&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt; &lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link to=&quot;/about/&quot;&gt;About&lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link to=&quot;/users/&quot;&gt;Users&lt;/Link&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;Route path=&quot;/&quot; exact component=&#123;Home&#125; /&gt; &lt;Route path=&quot;/about/&quot; component=&#123;About&#125; /&gt; &lt;Route path=&quot;/users/&quot; component=&#123;Users&#125; /&gt; &lt;/div&gt; &lt;/Router&gt; );&#125;export default AppRouter; 总结本教程介绍了React的基础知识，包括： React的概念和特点 组件的创建和使用 Props和State React生命周期 React Hooks JSX语法 事件处理 条件渲染和列表渲染 表单处理 组件通信 React Router的基本使用 要深入学习React，建议参考以下资源： React官方文档 React教程 - W3Schools React课程 - Codecademy 希望本教程对你有所帮助！如果你想了解更多关于React的高级概念，可以查看我的其他文章： React Hooks详解 React性能优化 React测试 请继续关注我的博客，获取更多前端开发相关知识。","categories":[{"name":"前端开发","slug":"前端开发","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"React","slug":"React","permalink":"http://example.com/tags/React/"},{"name":"前端开发","slug":"前端开发","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"},{"name":"前端框架","slug":"前端框架","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"}]}],"categories":[{"name":"前端开发","slug":"前端开发","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"React","slug":"React","permalink":"http://example.com/tags/React/"},{"name":"前端开发","slug":"前端开发","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"},{"name":"前端框架","slug":"前端框架","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"}]}